@page "/Categories"
@* @using ESIN.Clinic.Application.Categories *@
@* @using ESIN.Clinic.Domain.Abstractions *@
@* @using ESIN.Clinic.Domain.Entities *@
@* @using ESIN.Clinic.Infrastructure.Repositories *@


@* @inject CategoryQueries categoryQuery *@

<h3>Categories</h3>

@* <FluentDataGrid Items="@FilteredItems" ResizableColumns=true Pagination="@pagination" GridTemplateColumns="0.2fr 1fr 0.2fr 0.2fr 0.2fr 0.2fr" RowClass="@rowClass" RowStyle="@rowStyle" Style="height: 405px;overflow:auto;"> *@
@*     <PropertyColumn Property="@(c => c.Name)" Sortable="true" Tooltip="true" Title="Name of the country"> *@
@*         <ColumnOptions> *@
@*             <div class="search-box"> *@
@*                 <FluentSearch type="search" Autofocus=true @bind-Value=nameFilter @oninput="HandleCountryFilter" @bind-Value:after="HandleClear" Placeholder="Country name..." /> *@
@*             </div> *@
@*         </ColumnOptions> *@
@*     </PropertyColumn> *@
@*     <PropertyColumn Property="@(c => c.Description)" Align="Align.Start" Tooltip="true" /> *@
@* </FluentDataGrid> *@
@* *@
@* <FluentPaginator State="@pagination" /> *@

@code {
    // bool _clearItems = false;
    // IQueryable<Category>? items;
    // PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    // string nameFilter = string.Empty;
    //
    // GridSort<Category> rankSort = GridSort<Category>
    //     .ByDescending(x => x.Name)
    //     .ThenDescending(x => x.Description);
    //
    // Func<Category, string?> rowClass = x => x.Name.StartsWith("A") ? "highlighted-row" : null;
    // Func<Category, string?> rowStyle = x => x.Name.StartsWith("Au") ? "background-color: var(--highlight-bg);" : null;
    //
    // IQueryable<Category>? FilteredItems => items?.Where(x => x.Name.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));
    //
    // protected override async Task OnInitializedAsync()
    // {
    //     items = (await categoryQuery.GetCategoriesAsync()).AsQueryable();
    // }
    //
    // private void HandleCountryFilter(ChangeEventArgs args)
    // {
    //     if (args.Value is string value)
    //         nameFilter = value;
    // }
    //
    // private void HandleClear()
    // {
    //     if (string.IsNullOrWhiteSpace(nameFilter))
    //         nameFilter = string.Empty;
    // }
    //
    // private async Task ToggleItemsAsync()
    // {
    //     items = _clearItems 
    //         ? null 
    //         : (await categoryQuery.GetCategoriesAsync()).AsQueryable();
    // }
}